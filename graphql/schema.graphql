#カスタムスカラーを定義
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    #email, passwordでのログイン用のQuery
    #複数バリデーションあり。エラーメッセージをカスタム。
    #@eqディレクティブは一致するものを検索するもの
    auth(
        email: String!  #空のリクエストもバリデーションでメッセージをつけたいためリクエストは許容する
            @eq
            @rules(
                apply: ["email", "required"]
                messages: [
                    {
                        rule: "email"
                        message: "正しいメールアドレスを入力してください。"
                    }
                    #空のリクエストに対してのバリデーション
                    {
                        rule: "required"
                        message: "メールアドレスを入力してください。"
                    }
                ]
            )
        password: String!
            @eq
            @rules(
                apply: ["required"]
                messages: [
                    {
                        rule: "required"
                        message: "パスワードを入力してください。"
                    }
                ]
            )
    ): User @find

    #ユーザー一覧をページングして取得
    #@paginateディレクティブを使うと
    #getAllUsers(first: Int!, page: Int): UserPaginator <---自動でUserPaginator型が定義されている？
    #のように変換される

    #５件ずつページングしたい場合は以下のリクエスト
    #{
    #getAllUsers(first: 5) {
    #data{
    #id
    #name
    #}
    #paginatorInfo {　<---ページングの情報を取得できる
    #currentPage
    #lastPage
    #}
    #}
    #}
    getAllUsers: [User!]! @paginate

    #全ての投稿を取得(ページングなし)
    getAllPosts: [Post!]! @all

    #投稿一覧をページング（@paginate）
    #posts(first: Int!, page: Int): PostPaginator <---自動でPostPaginator型が定義されている？
    posts: [Post!]! @paginate

    #指定した投稿を取得
    post(id: Int! @eq): Post @find
}

type Mutation {
    #新しいユーザーを作る(バリデーションあり)
    #バリデーションするときは@rulesディレクティブを使う。返却型(User)の後に@create, @update, @findをつけないとエラーになる
    createUser(
        name: String!
        email: String! @rules(apply: ["email"])
        password: String!
    ): User @create

    #ユーザー更新用
    updateUser(id: ID!, name: String!): User @update

    #新規投稿
    createPost(
        title: String!
            @rules(
                apply: ["required", "max:20"]
                messages: [
                    { rule: "required", message: "titleを入力してください。" }
                    {
                        rule: "max"
                        message: "タイトルは20文字以内で入力してください。"
                    }
                ]
            )
        content: String!
            @rules(
                apply: ["required", "max:50"]
                messages: [
                    { rule: "required", message: "本文を入力してください。" }
                    {
                        rule: "max"
                        message: "本文は50文字以内で入力してください。"
                    }
                ]
            )
        author_id: Int!
    ): Post @create

    #新規コメント
    createComment(
        reply: String!
            @rules(
                apply: ["required", "max:50"]
                messages: [
                    {
                        rule: "required"
                        message: "コメントを入力してください。"
                    }
                    {
                        rule: "max"
                        message: "コメントは50文字以内で入力してください。"
                    }
                ]
            )
        post_id: Int!
    ): Comment @create
}

#リレーション関係
#users(id)<<--->>posts(author_id)
#posts(id)<<--->>comments(post_id)

#id, name, email, email_verified_at, password, remember_token, created_at, update_at
type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @hasMany
}

#id, author_id, title, content, created_at, update_at
type Post {
    id: ID!
    title: String!
    content: String!
    author: User! @belongsTo
    comments: [Comment!]! @hasMany
}

#id, post_id, reply, created_at, update_at
type Comment {
    id: ID!
    reply: String!
    post: Post! @belongsTo
}
